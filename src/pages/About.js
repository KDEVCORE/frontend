import { AssignmentOutlined, ContactMailOutlined, EmailOutlined, PersonPinOutlined, SignpostOutlined } from "@mui/icons-material";
import { Alert, AlertTitle, Box, Button, Card, CardActions, CardContent, CardHeader, Chip, Paper, Stack, Step, StepContent, StepLabel, Stepper, Tab, Tabs, Tooltip, Typography } from "@mui/material";
import PropTypes from "prop-types";
import { useState } from "react";

function TabPanel(props) {
    const { children, value, index, ...other } = props;

    return (
        <Paper
            role="tabpanel"
            hidden={value !== index}
            id={`simple-tabpanel-${index}`}
            aria-labelledby={`simple-tab-${index}`}
            {...other}
        >
            {value === index && (
                <Box sx={{ p: 3 }}>
                    <Typography component="span">{children}</Typography>
                </Box>
            )}
        </Paper>
    );
}

TabPanel.propTypes = {
    children: PropTypes.node,
    index: PropTypes.number.isRequired,
    value: PropTypes.number.isRequired,
};

function a11yProps(index) {
    return {
        id: `tab-${index}`,
        'aria-controls': `tabpanel-${index}`,
    };
}

const steps = [
    {
        label: "Í∞ÄÏπòÍ¥Ä",
        title: "Ï≤òÏùåÎ∂ÄÌÑ∞ ÏôÑÎ≤ΩÌï† Ïàò ÏóÜÏúºÎØÄÎ°ú, Î¶¨Î∑∞(Review)ÏôÄ Î¶¨Ìå©ÌÜ†ÎßÅ(Refactoring)ÏúºÎ°ú Ï¢ãÏùÄ Í∞úÎ∞úÏûêÍ∞Ä ÎêúÎã§.",
        description: "SI/SM ÏóÖÎ¨¥ ÌôòÍ≤ΩÏóêÏÑú Ïú†Ïó∞ÌïòÏßÄ Î™ªÌïú ÏãúÏä§ÌÖúÏùÑ Í≤ΩÌóòÌïòÎ©¥ÏÑú ÎäêÍºàÎçò, Ïã§ÌñâÎßå ÎêòÎäî Î°úÏßÅÏù¥ ÏïÑÎãå Ìö®Ïú®Ï†ÅÏù∏ ÏΩîÎìú ÏûëÏÑ±Ïùò Ï§ëÏöîÏÑ±ÏùÑ Íπ®Îã¨ÏïòÏäµÎãàÎã§. ÏïåÍ≥†Î¶¨Ï¶ò ÏΩîÎìúÎ∂ÄÌÑ∞ ÏÇ¨Ïö©ÌñàÎçò Í∏∞Ïà†Í≥º ÏïûÏúºÎ°ú ÏÇ¨Ïö©Ìï† Í∏∞Ïà†Ïùò Ïù¥Î°†Ï†ÅÏù∏ ÎÇ¥Ïö©ÍπåÏßÄ Íæ∏Ï§ÄÌûà Í≥µÎ∂ÄÌïòÍ≥† ÏûàÏäµÎãàÎã§.",
    },
    {
        label: "Î™©Ìëú",
        title: "ÏïàÏ£ºÌïòÏßÄ ÏïäÍ≥† Î∞úÏ†ÑÌïòÍ≥† Ïã∂ÏùÄ Í∞úÎ∞úÏûê",
        description: "ÌïôÎ∂Ä ÏãúÏ†à C, C++, Java Ïñ∏Ïñ¥Îì§ÏùÑ Í≤ΩÌóòÌï¥ Î≥¥Î©¥ÏÑú, JavaÏóê Ìù•ÎØ∏Î•º ÎäêÍºàÏäµÎãàÎã§. JavaÎ°ú Ìï† Ïàò ÏûàÎäî Í≤ÉÏùÑ Ï∞æÏúºÎ©¥ÏÑú Ïõπ Í∞úÎ∞úÏóê ÎåÄÌïú ÎÇ¥Ïö©ÏùÑ Ï∞æÏïòÍ≥† Ï°∞ÏÇ¨ÌñàÏäµÎãàÎã§. Í∑∏ÎûòÏÑú, Spring Legacy ProjectÎ°ú Web Í∞úÎ∞úÏùÑ ÏãúÏûëÌñàÍ≥†, Ïã§Î¨¥ÏóêÏÑú ÏûëÏßÄÎßå Ïó≠Ìï†ÏùÑ Îß°ÏïÑ Íµ¨ÌòÑÌñàÏäµÎãàÎã§. ÌïòÏßÄÎßå, Í∞úÎ∞úÏûêÎäî ÏÉàÎ°úÏö¥ Í∏∞Ïà† ÏäµÎìùÏù¥ Ï§ëÏöîÌïòÎã§Í≥† ÏÉùÍ∞ÅÌï©ÎãàÎã§. ÏµúÍ∑ºÏóêÎäî Spring Boot, JPAÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïõπ Í∞úÎ∞úÌôòÍ≤ΩÎèÑ Í≤ΩÌóòÌñàÍ≥†, Í∑∏Í≤ÉÏùÑ Î∞îÌÉïÏúºÎ°ú Spring Security, OAuth, JWTÎ•º Ï£ºÏûÖÌï¥ÏÑú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∞úÎ∞ú, AWSÏóê Î∞∞Ìè¨ÌïòÏó¨ ÎèÑÎ©îÏù∏ Î∞úÍ∏â Î∞è httpsÎ•º Ï†ÅÏö©ÌñàÏäµÎãàÎã§.",
    },
    {
        label: "Í≤ΩÌóò",
        title: "Java Í∏∞Î∞ò Spring Framework Ïõπ Í∞úÎ∞ú",
        description: "ÎåÄÌòï ÏãúÏä§ÌÖúÏóê ÎåÄÌïú Í≤ΩÌóòÏùÄ Î∂ÄÏ°±ÌïòÏßÄÎßå, Í∞úÎ∞úÏûêÏùò Í∏∞Î≥∏Í∏∞ÎùºÍ≥† ÏÉùÍ∞ÅÌïòÎäî Î∂ÑÏÑù, ÏÑ§Í≥Ñ, Íµ¨ÌòÑ Í≤ΩÌóòÏùÄ Îã§ÏñëÌï©ÎãàÎã§.",
    },
];


export default function About() {
    const [tabIndex, setTabIndex] = useState(0);
    const [activeStep, setActiveStep] = useState(0);
    const [chipData] = useState([
        { key: 0, label: 'Java' },
        { key: 1, label: 'Spring Framework' },
        { key: 2, label: 'Spring Boot' },
        { key: 3, label: 'Spring Security' },
        { key: 4, label: 'REST API' },
        { key: 5, label: 'JPA' },
        { key: 6, label: 'JWT' },
        { key: 7, label: 'OAuth' },
        { key: 8, label: 'JavaScript' },
        { key: 9, label: 'jQuery' },
        { key: 10, label: 'React' },
        { key: 11, label: 'GitHub' },
        { key: 12, label: 'AWS' },
    ]);

    const handleTabChange = (event, swapIndex) => {
        setTabIndex(swapIndex);
    };

    const handleNextStep = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBackStep = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleStepReset = () => {
        setActiveStep(0);
    };

    return (
        <Paper>
            <Box
                sx={{
                    borderBottom: 1,
                    borderColor: 'divider'
                }}
            >
                <Tabs value={tabIndex} onChange={handleTabChange}>
                    <Tab icon={<PersonPinOutlined />} label="me" {...a11yProps(0)} onClick={handleStepReset} />
                    <Tab icon={<ContactMailOutlined />} label="contact" {...a11yProps(1)} />
                </Tabs>
            </Box>
            <TabPanel value={tabIndex} index={0}>
                <Stepper activeStep={activeStep} orientation="vertical">
                    {steps.map((step, index) => (
                        <Step key={index}>
                            <StepLabel>
                                {step.label}
                            </StepLabel>
                            <StepContent>
                                <Alert
                                    severity="info"
                                >
                                    <AlertTitle><strong>{step.title}</strong></AlertTitle>
                                    {step.description}
                                    {index === steps.length - 1 && (
                                        <Stack direction="row" spacing={1} sx={{ mt: 2 }}>
                                            {chipData.map((data) => {
                                                return (
                                                    <Chip key={data.key} label={data.label} variant="outlined" />
                                                );
                                            })}
                                        </Stack>
                                    )}
                                </Alert>
                                <Box sx={{ my: 2 }}>
                                    <Button
                                        variant="contained"
                                        disabled={index === 0}
                                        onClick={handleBackStep}
                                        sx={{ mt: 1, mr: 1 }}
                                    >
                                        {"back"}
                                    </Button>
                                    <Button
                                        variant="contained"
                                        onClick={handleNextStep}
                                        sx={{ mt: 1, mr: 1 }}
                                    >
                                        {index === steps.length - 1 ? 'finish' : 'next'}
                                    </Button>
                                </Box>
                            </StepContent>
                        </Step>
                    ))}
                </Stepper>
                {activeStep === steps.length && (
                    <Paper square elevation={0} sx={{ p: 3 }}>
                        <Box>
                            <Typography component="span">{"Í∞êÏÇ¨Ìï©ÎãàÎã§.üòÑ"}</Typography>
                        </Box>
                        <Button variant="outlined" onClick={handleStepReset} sx={{ mt: 1, mr: 1 }}>
                            {"Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú Î≥¥Í∏∞"}
                        </Button>
                    </Paper>
                )}
            </TabPanel>
            <TabPanel value={tabIndex} index={1}>
                <Card sx={{ width: "auto" }}>
                    <CardHeader
                        title="Information"
                        subheader="ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©Ïù¥ Í∂ÅÍ∏àÌïòÏãúÎ©¥, 'ÏÉÅÏÑ∏ Ïù¥Î†•' ÎòêÎäî 'Î∏îÎ°úÍ∑∏'Î•º ÏÇ¥Ìé¥Ï£ºÏãúÍ∏∏ Î∞îÎûçÎãàÎã§. üòä"
                    />
                    <CardContent>
                        <Tooltip title="E-Mail" placement="bottom">
                            <Chip icon={<EmailOutlined />} label="kdevcore@gmail.com" variant="outlined" />
                        </Tooltip>
                    </CardContent>
                    <CardActions>
                        <Button
                            variant="text"
                            href="https://kdevcore.notion.site/About-me-c77a689de8114d4b91af9d35f7c59230"
                            color="inherit"
                            size="large"
                            target="_blank"
                            startIcon={<SignpostOutlined />}
                        >
                            {"ÏÉÅÏÑ∏ Ïù¥Î†•"}
                        </Button>
                        <Button
                            variant="text"
                            href="https://kdevcore.notion.site/252f99974c2a4a87b13f0ce53a70ca68"
                            color="inherit"
                            size="large"
                            target="_blank"
                            startIcon={<AssignmentOutlined />}
                        >
                            {"Î∏îÎ°úÍ∑∏"}
                        </Button>
                    </CardActions>
                </Card>
            </TabPanel>
        </Paper>
    );
}