import { Box, Button, Card, CardContent, CardHeader, Chip, Divider, Link, Paper, Stack, Step, StepContent, StepLabel, Stepper, Tab, Tabs, Typography } from "@mui/material";
import PropTypes from "prop-types";
import { useState } from "react";

function TabPanel(props) {
    const { children, value, index, ...other } = props;

    return (
        <Paper
            role="tabpanel"
            hidden={value !== index}
            id={`simple-tabpanel-${index}`}
            aria-labelledby={`simple-tab-${index}`}
            {...other}
        >
            {value === index && (
                <Box sx={{ p: 3 }}>
                    <Typography component="span">{children}</Typography>
                </Box>
            )}
        </Paper>
    );
}

TabPanel.propTypes = {
    children: PropTypes.node,
    index: PropTypes.number.isRequired,
    value: PropTypes.number.isRequired,
};

function a11yProps(index) {
    return {
        id: `tab-${index}`,
        'aria-controls': `tabpanel-${index}`,
    };
}

const steps = [
    {
        label: "Í∞ÄÏπòÍ¥Ä",
        title: "Ï≤òÏùåÎ∂ÄÌÑ∞ ÏôÑÎ≤ΩÌï† Ïàò ÏóÜÏúºÎØÄÎ°ú, Î¶¨Î∑∞(Review)ÏôÄ Î¶¨Ìå©ÌÜ†ÎßÅ(Refactoring)ÏúºÎ°ú Ï¢ãÏùÄ Í∞úÎ∞úÏûêÍ∞Ä ÎêúÎã§.",
        description: "SI/SM ÏóÖÎ¨¥ ÌôòÍ≤ΩÏóêÏÑú Ïú†Ïó∞ÌïòÏßÄ Î™ªÌïú ÏãúÏä§ÌÖúÏùÑ Í≤ΩÌóòÌïòÎ©¥ÏÑú ÎäêÍºàÎçò Ïã§ÌñâÎßå ÎêòÎäî Î°úÏßÅÏù¥ ÏïÑÎãå, Ìö®Ïú®Ï†ÅÏù∏ ÏΩîÎìú ÏûëÏÑ±Ïùò Ï§ëÏöîÏÑ±ÏùÑ Íπ®Îã¨ÏïòÏäµÎãàÎã§.",
    },
    {
        label: "Î™©Ìëú",
        title: "ÏÑ±Ïû•ÌïòÍ≥† Ïã∂ÏùÄ Í∞úÎ∞úÏûê",
        description: "Spring Legacy ProjectÎ°ú Web Í∞úÎ∞úÏùÑ ÏãúÏûëÌñàÏßÄÎßå, Í∞úÎ∞úÏûêÎäî ÏÉàÎ°úÏö¥ Í∏∞Ïà† ÏäµÎìùÏù¥ Ï§ëÏöîÌïòÎã§Í≥† ÏÉùÍ∞ÅÌï©ÎãàÎã§. ÏµúÍ∑ºÏóêÎäî Spring Boot, JPAÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïõπ Í∞úÎ∞úÌôòÍ≤ΩÎèÑ Í≤ΩÌóòÌñàÍ≥†, Í∑∏Í≤ÉÏùÑ Î∞îÌÉïÏúºÎ°ú Spring Security, JWT, OAuth 2Î•º Ï£ºÏûÖÌï¥ÏÑú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∞úÎ∞ú, AWSÏóê Î∞∞Ìè¨ÌïòÏó¨ ÎèÑÎ©îÏù∏ Î∞úÍ∏â Î∞è httpsÎ•º Ï†ÅÏö©ÌñàÏäµÎãàÎã§.",
    },
    {
        label: "Í∏∞Ïà† Í≤ΩÌóò",
        title: "Java Í∏∞Î∞ò Spring Framework Ïõπ Í∞úÎ∞ú",
        description: "Î∂ÑÏÑù, ÏÑ§Í≥Ñ, Î∞∞Ìè¨Ïóê ÎåÄÌïú Í≤ΩÌóòÏùÄ Îã§ÏÜå Î∂ÄÏ°±ÌïòÏßÄÎßå, Í∞úÎ∞úÏûêÏùò Í∏∞Î≥∏Í∏∞ÎùºÍ≥† ÏÉùÍ∞ÅÌïòÎäî Íµ¨ÌòÑ Í≤ΩÌóòÏùÄ Îã§ÏñëÌï©ÎãàÎã§.",
    },
];


export default function About() {
    const [tabIndex, setTabIndex] = useState(0);
    const [activeStep, setActiveStep] = useState(0);
    const [chipData] = useState([
        { key: 0, label: 'Java' },
        { key: 1, label: 'Spring Framework' },
        { key: 2, label: 'Spring Boot' },
        { key: 3, label: 'Spring Security' },
        { key: 4, label: 'REST API' },
        { key: 5, label: 'JPA' },
        { key: 6, label: 'JWT' },
        { key: 7, label: 'OAuth 2' },
        { key: 8, label: 'JavaScript' },
        { key: 9, label: 'jQuery' },
        { key: 10, label: 'React' },
        { key: 11, label: 'GitHub' },
        { key: 12, label: 'AWS' },
    ]);

    const handleTabChange = (event, swapIndex) => {
        setTabIndex(swapIndex);
    };

    const handleNextStep = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBackStep = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleStepReset = () => {
        setActiveStep(0);
    };

    return (
        <Paper>
            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                <Tabs value={tabIndex} onChange={handleTabChange}>
                    <Tab label="me" onClick={handleStepReset} {...a11yProps(0)} />
                    <Tab label="contact" {...a11yProps(1)} />
                </Tabs>
            </Box>
            <TabPanel value={tabIndex} index={0}>
                <Stepper activeStep={activeStep} orientation="vertical">
                    {steps.map((step, index) => (
                        <Step key={index}>
                            <StepLabel>
                                {step.label}
                            </StepLabel>
                            <StepContent>
                                <Card>
                                    <CardHeader title={step.title} />
                                    <CardContent>
                                        {step.description}
                                    </CardContent>
                                    {index === steps.length - 1 && (
                                        <CardContent>
                                            <Stack direction="row" spacing={1}>
                                                {chipData.map((data) => {
                                                    return (
                                                        <Chip key={data.key} label={data.label} variant="outlined" />
                                                    );
                                                })}
                                            </Stack>
                                        </CardContent>
                                    )}
                                </Card>
                                <Box sx={{ mb: 2 }}>
                                    <div>
                                        <Button
                                            variant="contained"
                                            onClick={handleNextStep}
                                            sx={{ mt: 1, mr: 1 }}
                                            >
                                            {index === steps.length - 1 ? 'finish' : 'next'}
                                        </Button>
                                        <Button
                                            variant="contained"
                                            disabled={index === 0}
                                            onClick={handleBackStep}
                                            sx={{ mt: 1, mr: 1 }}
                                        >
                                            {"back"}
                                        </Button>
                                    </div>
                                </Box>
                            </StepContent>
                        </Step>
                    ))}
                </Stepper>
                {activeStep === steps.length && (
                    <Paper square elevation={0} sx={{ p: 3 }}>
                        <Box>
                            <Typography component="span">{"Í∞êÏÇ¨Ìï©ÎãàÎã§.üòÑ"}</Typography>
                        </Box>
                        <Button variant="outlined" onClick={handleStepReset} sx={{ mt: 1, mr: 1 }}>
                            {"Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú Î≥¥Í∏∞"}
                        </Button>
                    </Paper>
                )}
            </TabPanel>
            <TabPanel value={tabIndex} index={1}>
                <Stack
                    divider={<Divider orientation="vertical" flexItem />}
                    direction={{ sm: "column", md: "row" }}
                    spacing={{ sm: 1, md: 2 }}
                    justifyContent="center"
                    alignItems="center"
                >
                    <Card sx={{ width: "auto" }}>
                        <CardHeader
                            title="Information"
                            subheader="Í≥ºÎèÑÌïú Í∞úÏù∏Ï†ïÎ≥¥ Ïú†Ï∂úÏùÑ ÎßâÍ∏∞ ÏúÑÌï¥, Email Ï£ºÏÜåÎßåÏùÑ ÏïåÎ†§ ÎìúÎ¶ΩÎãàÎã§.ü§ê"
                        />
                        <CardContent>
                            <Typography component="span">{"E-mail: kdevcore@gmail.com"}</Typography>
                        </CardContent>
                        <CardContent>
                            <Typography component="span">
                                {"ÏÉÅÏÑ∏ Ïù¥Î†•: "}
                                <Link
                                    href="https://kdevcore.notion.site/About-me-c77a689de8114d4b91af9d35f7c59230"
                                    underline="hover"
                                    target="_blank"
                                >
                                    {"Î≥¥Îü¨ Í∞ÄÍ∏∞"}
                                </Link>
                            </Typography>
                        </CardContent>
                    </Card>
                    <Card>
                        <CardHeader
                            title="Blog"
                            subheader="ÏïÑÏßÅ Ï§ÄÎπÑÏ§ëÏûÖÎãàÎã§.üòì Í∑∏ ÎåÄÏã†Ïóê GitHub Ï£ºÏÜåÎ•º Ï≤®Î∂ÄÌï©ÎãàÎã§."
                        />
                        <CardContent>
                            <Typography component="span">
                                {"GitHub: "}
                                <Link
                                    href="https://github.com/KDEVCORE"
                                    underline="hover"
                                    target="_blank"
                                >
                                    {"https://github.com/KDEVCORE"}
                                </Link>
                            </Typography>
                        </CardContent>
                    </Card>
                </Stack>
            </TabPanel>
        </Paper>
    );
}